{"version":3,"sources":["webpack:///./node_modules/muff/crate/pkg/muff.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACkC;;AAElC;;AAEA;AACA;AACA,uEAAuE,+CAAW;AAClF,6CAA6C,+CAAW;AACxD;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,gBAAgB,0DAAsB;AACtC;AACA;AACA;AACA;AACA;AACA,UAAU,OAAO;AACjB,YAAY;AACZ;AACO;AACP;AACA;AACA;AACA,eAAe,0DAAsB;;AAErC,KAAK;AACL,QAAQ,wDAAoB;;AAE5B;;AAEA;;AAEA;AACA,UAAU,OAAO;AACjB,YAAY;AACZ;AACO;AACP,WAAW,4DAAwB;AACnC;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,kCAAkC,uEAAmC;AACrE;AACA;AACA;;AAEA;AACA;AACA,yEAAyE,+CAAW;AACpF,+CAA+C,+CAAW;AAC1D;AACA;AACA;AACA;AACA,UAAU,OAAO;AACjB,YAAY;AACZ;AACO;AACP;AACA;AACA;AACA;AACA,QAAQ,mDAAe;AACvB;AACA;AACA;;AAEA;AACA,QAAQ,wDAAoB;AAC5B;;;AAGA,KAAK;AACL,QAAQ,wDAAoB;;AAE5B;;AAEA;;AAEA;AACA,YAAY;AACZ;AACO;AACP,WAAW,qDAAiB;AAC5B","file":"3.bundle.worker.js","sourcesContent":["/* tslint:disable */\nimport * as wasm from './muff_bg';\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passStringToWasm(arg) {\n\n    const buf = cachedTextEncoder.encode(arg);\n    const ptr = wasm.__wbindgen_malloc(buf.length);\n    getUint8Memory().set(buf, ptr);\n    WASM_VECTOR_LEN = buf.length;\n    return ptr;\n}\n/**\n* @param {string} arg0\n* @returns {void}\n*/\nexport function setSearchWordList(arg0) {\n    const ptr0 = passStringToWasm(arg0);\n    const len0 = WASM_VECTOR_LEN;\n    try {\n        return wasm.setSearchWordList(ptr0, len0);\n\n    } finally {\n        wasm.__wbindgen_free(ptr0, len0 * 1);\n\n    }\n\n}\n\n/**\n* @param {number} arg0\n* @returns {void}\n*/\nexport function setReturnListLength(arg0) {\n    return wasm.setReturnListLength(arg0);\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nlet cachedGlobalArgumentPtr = null;\nfunction globalArgumentPtr() {\n    if (cachedGlobalArgumentPtr === null) {\n        cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();\n    }\n    return cachedGlobalArgumentPtr;\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory;\n}\n/**\n* @param {string} arg0\n* @returns {string}\n*/\nexport function fuzzyMatch(arg0) {\n    const ptr0 = passStringToWasm(arg0);\n    const len0 = WASM_VECTOR_LEN;\n    const retptr = globalArgumentPtr();\n    try {\n        wasm.fuzzyMatch(retptr, ptr0, len0);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        wasm.__wbindgen_free(rustptr, rustlen * 1);\n        return realRet;\n\n\n    } finally {\n        wasm.__wbindgen_free(ptr0, len0 * 1);\n\n    }\n\n}\n\n/**\n* @returns {number}\n*/\nexport function getHitLength() {\n    return wasm.getHitLength();\n}\n\n"],"sourceRoot":""}