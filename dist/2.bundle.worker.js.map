{"version":3,"sources":["webpack:///./node_modules/muff/crate/pkg/muff.js"],"names":["__webpack_require__","r","__webpack_exports__","d","setSearchWordList","setReturnListLength","fuzzyMatch","getHitLength","_muff_bg__WEBPACK_IMPORTED_MODULE_0__","cachedTextEncoder","TextEncoder","cachegetUint8Memory","getUint8Memory","buffer","Uint8Array","WASM_VECTOR_LEN","passStringToWasm","arg","buf","encode","ptr","length","set","arg0","ptr0","len0","cachedTextDecoder","TextDecoder","cachedGlobalArgumentPtr","cachegetUint32Memory","retptr","mem","Uint32Array","rustptr","rustlen","realRet","len","decode","subarray","getStringFromWasm","slice"],"mappings":"qHAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,sCAAAE,IAAAJ,EAAAG,EAAAD,EAAA,wCAAAG,IAAAL,EAAAG,EAAAD,EAAA,+BAAAI,IAAAN,EAAAG,EAAAD,EAAA,iCAAAK,IAAA,IAAAC,EAAAR,EAAA,GAGA,IAAAS,EAAA,IAAAC,YAAA,SAEAC,EAAA,KACA,SAAAC,IAIA,OAHA,OAAAD,KAAAE,SAAuEL,EAAA,EAAWK,SAClFF,EAAA,IAAAG,WAA6CN,EAAA,EAAWK,SAExDF,EAGA,IAAAI,EAAA,EAEA,SAAAC,EAAAC,GAEA,MAAAC,EAAAT,EAAAU,OAAAF,GACAG,EAAgBZ,EAAA,EAAsBU,EAAAG,QAGtC,OAFAT,IAAAU,IAAAJ,EAAAE,GACAL,EAAAG,EAAAG,OACAD,EAMO,SAAAhB,EAAAmB,GACP,MAAAC,EAAAR,EAAAO,GACAE,EAAAV,EACA,IACA,OAAeP,EAAA,EAAsBgB,EAAAC,GAEhC,QACGjB,EAAA,EAAoBgB,EAAA,EAAAC,IAUrB,SAAApB,EAAAkB,GACP,OAAWf,EAAA,EAAwBe,GAGnC,IAAAG,EAAA,IAAAC,YAAA,SAMA,IAAAC,EAAA,KAQA,IAAAC,EAAA,KAWO,SAAAvB,EAAAiB,GACP,MAAAC,EAAAR,EAAAO,GACAE,EAAAV,EACAe,GApBA,OAAAF,IACAA,EAAkCpB,EAAA,KAElCoB,GAkBA,IACQpB,EAAA,EAAesB,EAAAN,EAAAC,GACvB,MAAAM,GAfA,OAAAF,KAAAhB,SAAyEL,EAAA,EAAWK,SACpFgB,EAAA,IAAAG,YAA+CxB,EAAA,EAAWK,SAE1DgB,GAaAI,EAAAF,EAAAD,EAAA,GACAI,EAAAH,EAAAD,EAAA,KAEAK,EAjCA,SAAAf,EAAAgB,GACA,OAAAV,EAAAW,OAAAzB,IAAA0B,SAAAlB,IAAAgB,IAgCAG,CAAAN,EAAAC,GAAAM,QAEA,OADQhC,EAAA,EAAoByB,EAAA,EAAAC,GAC5BC,EAGK,QACG3B,EAAA,EAAoBgB,EAAA,EAAAC,IASrB,SAAAlB,IACP,OAAWC,EAAA","file":"2.bundle.worker.js","sourcesContent":["/* tslint:disable */\nimport * as wasm from './muff_bg';\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passStringToWasm(arg) {\n\n    const buf = cachedTextEncoder.encode(arg);\n    const ptr = wasm.__wbindgen_malloc(buf.length);\n    getUint8Memory().set(buf, ptr);\n    WASM_VECTOR_LEN = buf.length;\n    return ptr;\n}\n/**\n* @param {string} arg0\n* @returns {void}\n*/\nexport function setSearchWordList(arg0) {\n    const ptr0 = passStringToWasm(arg0);\n    const len0 = WASM_VECTOR_LEN;\n    try {\n        return wasm.setSearchWordList(ptr0, len0);\n\n    } finally {\n        wasm.__wbindgen_free(ptr0, len0 * 1);\n\n    }\n\n}\n\n/**\n* @param {number} arg0\n* @returns {void}\n*/\nexport function setReturnListLength(arg0) {\n    return wasm.setReturnListLength(arg0);\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nlet cachedGlobalArgumentPtr = null;\nfunction globalArgumentPtr() {\n    if (cachedGlobalArgumentPtr === null) {\n        cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();\n    }\n    return cachedGlobalArgumentPtr;\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory;\n}\n/**\n* @param {string} arg0\n* @returns {string}\n*/\nexport function fuzzyMatch(arg0) {\n    const ptr0 = passStringToWasm(arg0);\n    const len0 = WASM_VECTOR_LEN;\n    const retptr = globalArgumentPtr();\n    try {\n        wasm.fuzzyMatch(retptr, ptr0, len0);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        wasm.__wbindgen_free(rustptr, rustlen * 1);\n        return realRet;\n\n\n    } finally {\n        wasm.__wbindgen_free(ptr0, len0 * 1);\n\n    }\n\n}\n\n/**\n* @returns {number}\n*/\nexport function getHitLength() {\n    return wasm.getHitLength();\n}\n\n"],"sourceRoot":""}