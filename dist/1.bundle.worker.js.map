{"version":3,"sources":["webpack:///./node_modules/comlinkjs/comlink.js","webpack:///./node_modules/muff/index.js","webpack:///./assets/js/comlink.js"],"names":["TRANSFERABLE_TYPES","filter","f","self","map","uid","Math","floor","random","Number","MAX_SAFE_INTEGER","proxyValueSymbol","Symbol","throwSymbol","transferHandlers","Map","canHandle","obj","serialize","port1","port2","MessageChannel","expose","deserialize","endpoint","target","isWindow","windowEndpoint","isEndpoint","Error","activateEndpoint","cbProxy","cb","callPath","Proxy","construct","_target","argumentsList","proxy","type","apply","_thisArg","length","slice","[object Object]","property","then","r","Promise","resolve","bind","concat","set","value","_proxy","async","irequest","args","wrapValue","unwrapValue","msg","transferables","id","pingPongMessageCounter","attachMessageHandler","handler","event","data","removeEventListener","detachMessageHandler","Object","assign","postMessage","pingPongMessage","transferableProperties","message","stack","rootObj","that","reduce","propName","iresult","e","proxyValue","transferHandler","makeInvocationResult","arg","key","wrappedChildren","item","iterateAllProperties","push","path","wrappedValue","wrappedChild","has","get","isRawWrappedValue","wrappedChildValue","join","newValue","replaceValueInObjectAtPath","newVal","lastKey","w","constructor","name","addEventListener","transfer","isMessagePort","start","every","prop","isTransferable","thing","some","visited","WeakSet","add","ArrayBuffer","isView","keys","wasm","__webpack_require__","Muff","init","setReturnListLength","listCount","this","setSearchWordList","searchWordList","JSON","stringify","search","inputWord","parse","fuzzyMatch","getHitLength","muff","maxSearchWordListLen","setSearchWordListWrapper","console","log","Comlink"],"mappings":"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","file":"1.bundle.worker.js","sourcesContent":["/**\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst TRANSFERABLE_TYPES = [\"ArrayBuffer\", \"MessagePort\", \"OffscreenCanvas\"]\n    .filter(f => f in self)\n    .map(f => self[f]);\nconst uid = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\nconst proxyValueSymbol = Symbol(\"proxyValue\");\nconst throwSymbol = Symbol(\"throw\");\nconst proxyTransferHandler = {\n    canHandle: (obj) => obj && obj[proxyValueSymbol],\n    serialize: (obj) => {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return port2;\n    },\n    deserialize: (obj) => {\n        return proxy(obj);\n    }\n};\nconst throwTransferHandler = {\n    canHandle: (obj) => obj && obj[throwSymbol],\n    serialize: (obj) => {\n        const message = obj && obj.message;\n        const stack = obj && obj.stack;\n        return Object.assign({}, obj, { message, stack });\n    },\n    deserialize: (obj) => {\n        throw Object.assign(Error(), obj);\n    }\n};\nexport const transferHandlers = new Map([\n    [\"PROXY\", proxyTransferHandler],\n    [\"THROW\", throwTransferHandler]\n]);\nlet pingPongMessageCounter = 0;\nexport function proxy(endpoint, target) {\n    if (isWindow(endpoint))\n        endpoint = windowEndpoint(endpoint);\n    if (!isEndpoint(endpoint))\n        throw Error(\"endpoint does not have all of addEventListener, removeEventListener and postMessage defined\");\n    activateEndpoint(endpoint);\n    return cbProxy(async (irequest) => {\n        let args = [];\n        if (irequest.type === \"APPLY\" || irequest.type === \"CONSTRUCT\")\n            args = irequest.argumentsList.map(wrapValue);\n        const response = await pingPongMessage(endpoint, Object.assign({}, irequest, { argumentsList: args }), transferableProperties(args));\n        const result = response.data;\n        return unwrapValue(result.value);\n    }, [], target);\n}\nexport function proxyValue(obj) {\n    obj[proxyValueSymbol] = true;\n    return obj;\n}\nexport function expose(rootObj, endpoint) {\n    if (isWindow(endpoint))\n        endpoint = windowEndpoint(endpoint);\n    if (!isEndpoint(endpoint))\n        throw Error(\"endpoint does not have all of addEventListener, removeEventListener and postMessage defined\");\n    activateEndpoint(endpoint);\n    attachMessageHandler(endpoint, async function (event) {\n        if (!event.data.id || !event.data.callPath)\n            return;\n        const irequest = event.data;\n        let that = await irequest.callPath\n            .slice(0, -1)\n            .reduce((obj, propName) => obj[propName], rootObj);\n        let obj = await irequest.callPath.reduce((obj, propName) => obj[propName], rootObj);\n        let iresult = obj;\n        let args = [];\n        if (irequest.type === \"APPLY\" || irequest.type === \"CONSTRUCT\")\n            args = irequest.argumentsList.map(unwrapValue);\n        if (irequest.type === \"APPLY\") {\n            try {\n                iresult = await obj.apply(that, args);\n            }\n            catch (e) {\n                iresult = e;\n                iresult[throwSymbol] = true;\n            }\n        }\n        if (irequest.type === \"CONSTRUCT\") {\n            try {\n                iresult = new obj(...args); // eslint-disable-line new-cap\n                iresult = proxyValue(iresult);\n            }\n            catch (e) {\n                iresult = e;\n                iresult[throwSymbol] = true;\n            }\n        }\n        if (irequest.type === \"SET\") {\n            obj[irequest.property] = irequest.value;\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            iresult = true;\n        }\n        iresult = makeInvocationResult(iresult);\n        iresult.id = irequest.id;\n        return endpoint.postMessage(iresult, transferableProperties([iresult]));\n    });\n}\nfunction wrapValue(arg) {\n    // Is arg itself handled by a TransferHandler?\n    for (const [key, transferHandler] of transferHandlers) {\n        if (transferHandler.canHandle(arg)) {\n            return {\n                type: key,\n                value: transferHandler.serialize(arg)\n            };\n        }\n    }\n    // If not, traverse the entire object and find handled values.\n    let wrappedChildren = [];\n    for (const item of iterateAllProperties(arg)) {\n        for (const [key, transferHandler] of transferHandlers) {\n            if (transferHandler.canHandle(item.value)) {\n                wrappedChildren.push({\n                    path: item.path,\n                    wrappedValue: {\n                        type: key,\n                        value: transferHandler.serialize(item.value)\n                    }\n                });\n            }\n        }\n    }\n    for (const wrappedChild of wrappedChildren) {\n        const container = wrappedChild.path\n            .slice(0, -1)\n            .reduce((obj, key) => obj[key], arg);\n        container[wrappedChild.path[wrappedChild.path.length - 1]] = null;\n    }\n    return {\n        type: \"RAW\",\n        value: arg,\n        wrappedChildren\n    };\n}\nfunction unwrapValue(arg) {\n    if (transferHandlers.has(arg.type)) {\n        const transferHandler = transferHandlers.get(arg.type);\n        return transferHandler.deserialize(arg.value);\n    }\n    else if (isRawWrappedValue(arg)) {\n        for (const wrappedChildValue of arg.wrappedChildren || []) {\n            if (!transferHandlers.has(wrappedChildValue.wrappedValue.type))\n                throw Error(`Unknown value type \"${arg.type}\" at ${wrappedChildValue.path.join(\".\")}`);\n            const transferHandler = transferHandlers.get(wrappedChildValue.wrappedValue.type);\n            const newValue = transferHandler.deserialize(wrappedChildValue.wrappedValue.value);\n            replaceValueInObjectAtPath(arg.value, wrappedChildValue.path, newValue);\n        }\n        return arg.value;\n    }\n    else {\n        throw Error(`Unknown value type \"${arg.type}\"`);\n    }\n}\nfunction replaceValueInObjectAtPath(obj, path, newVal) {\n    const lastKey = path.slice(-1)[0];\n    const lastObj = path\n        .slice(0, -1)\n        .reduce((obj, key) => obj[key], obj);\n    lastObj[lastKey] = newVal;\n}\nfunction isRawWrappedValue(arg) {\n    return arg.type === \"RAW\";\n}\nfunction windowEndpoint(w) {\n    if (self.constructor.name !== \"Window\")\n        throw Error(\"self is not a window\");\n    return {\n        addEventListener: self.addEventListener.bind(self),\n        removeEventListener: self.removeEventListener.bind(self),\n        postMessage: (msg, transfer) => w.postMessage(msg, \"*\", transfer)\n    };\n}\nfunction isEndpoint(endpoint) {\n    return (\"addEventListener\" in endpoint &&\n        \"removeEventListener\" in endpoint &&\n        \"postMessage\" in endpoint);\n}\nfunction activateEndpoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.start();\n}\nfunction attachMessageHandler(endpoint, f) {\n    // Checking all possible types of `endpoint` manually satisfies TypeScript’s\n    // type checker. Not sure why the inference is failing here. Since it’s\n    // unnecessary code I’m going to resort to `any` for now.\n    // if(isWorker(endpoint))\n    //   endpoint.addEventListener('message', f);\n    // if(isMessagePort(endpoint))\n    //   endpoint.addEventListener('message', f);\n    // if(isOtherWindow(endpoint))\n    //   endpoint.addEventListener('message', f);\n    endpoint.addEventListener(\"message\", f);\n}\nfunction detachMessageHandler(endpoint, f) {\n    // Same as above.\n    endpoint.removeEventListener(\"message\", f);\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction isWindow(endpoint) {\n    // TODO: This doesn’t work on cross-origin iframes.\n    // return endpoint.constructor.name === 'Window';\n    return [\"window\", \"length\", \"location\", \"parent\", \"opener\"].every(prop => prop in endpoint);\n}\n/**\n * `pingPongMessage` sends a `postMessage` and waits for a reply. Replies are\n * identified by a unique id that is attached to the payload.\n */\nfunction pingPongMessage(endpoint, msg, transferables) {\n    const id = `${uid}-${pingPongMessageCounter++}`;\n    return new Promise(resolve => {\n        attachMessageHandler(endpoint, function handler(event) {\n            if (event.data.id !== id)\n                return;\n            detachMessageHandler(endpoint, handler);\n            resolve(event);\n        });\n        // Copy msg and add `id` property\n        msg = Object.assign({}, msg, { id });\n        endpoint.postMessage(msg, transferables);\n    });\n}\nfunction cbProxy(cb, callPath = [], target = function () { }) {\n    return new Proxy(target, {\n        construct(_target, argumentsList, proxy) {\n            return cb({\n                type: \"CONSTRUCT\",\n                callPath,\n                argumentsList\n            });\n        },\n        apply(_target, _thisArg, argumentsList) {\n            // We use `bind` as an indicator to have a remote function bound locally.\n            // The actual target for `bind()` is currently ignored.\n            if (callPath[callPath.length - 1] === \"bind\")\n                return cbProxy(cb, callPath.slice(0, -1));\n            return cb({\n                type: \"APPLY\",\n                callPath,\n                argumentsList\n            });\n        },\n        get(_target, property, proxy) {\n            if (property === \"then\" && callPath.length === 0) {\n                return { then: () => proxy };\n            }\n            else if (property === \"then\") {\n                const r = cb({\n                    type: \"GET\",\n                    callPath\n                });\n                return Promise.resolve(r).then.bind(r);\n            }\n            else {\n                return cbProxy(cb, callPath.concat(property), _target[property]);\n            }\n        },\n        set(_target, property, value, _proxy) {\n            return cb({\n                type: \"SET\",\n                callPath,\n                property,\n                value\n            });\n        }\n    });\n}\nfunction isTransferable(thing) {\n    return TRANSFERABLE_TYPES.some(type => thing instanceof type);\n}\nfunction* iterateAllProperties(value, path = [], visited = null) {\n    if (!value)\n        return;\n    if (!visited)\n        visited = new WeakSet();\n    if (visited.has(value))\n        return;\n    if (typeof value === \"string\")\n        return;\n    if (typeof value === \"object\")\n        visited.add(value);\n    if (ArrayBuffer.isView(value))\n        return;\n    yield { value, path };\n    const keys = Object.keys(value);\n    for (const key of keys)\n        yield* iterateAllProperties(value[key], [...path, key], visited);\n}\nfunction transferableProperties(obj) {\n    const r = [];\n    for (const prop of iterateAllProperties(obj)) {\n        if (isTransferable(prop.value))\n            r.push(prop.value);\n    }\n    return r;\n}\nfunction makeInvocationResult(obj) {\n    for (const [type, transferHandler] of transferHandlers) {\n        if (transferHandler.canHandle(obj)) {\n            const value = transferHandler.serialize(obj);\n            return {\n                value: { type, value }\n            };\n        }\n    }\n    return {\n        value: {\n            type: \"RAW\",\n            value: obj\n        }\n    };\n}\n","const wasm = import(\"./crate/pkg/muff.js\")\n\nvar Muff = {\n\twasm: null,\n\n\tinit: async function() {\n\t\tMuff.wasm = await wasm\n\t\treturn Promise.resolve()\n\t},\n\n\tsetReturnListLength: function(listCount) {\n\t\tthis.wasm.setReturnListLength(listCount)\n\t},\n\n\tsetSearchWordList: function(searchWordList) {\n\t\tthis.wasm.setSearchWordList(JSON.stringify(searchWordList))\n\t},\n\n\tsearch: function(inputWord) {\n\t\treturn JSON.parse(this.wasm.fuzzyMatch(inputWord))\n\t},\n\n\tgetHitLength: function() {\n\t\treturn this.wasm.getHitLength()\n\t}\n}\n\nexport default Muff\n\n","import * as Comlink from 'comlinkjs'\nimport Muff from 'muff'\n\nconst wasm = {\n\t// 検索件数上限\n\tmaxSearchWordListLen: 0,\n\n\tinit: async function(maxSearchWordListLen) {\n\t\tthis.maxSearchWordListLen = maxSearchWordListLen\n\n\t\t// このオブジェクトにWebAssemblyをマージして使う\n\t\tawait Muff.init()\n\t\tObject.assign(wasm, Muff);\n\t},\n\n\tsetSearchWordListWrapper(searchWordList) {\n\t\tif (this.maxSearchWordListLen <= 0) {\n\t\t\tconsole.log('Please set \"maxSearchWordListLen\" over 1.')\n\t\t}\n\t\t// 検索件数に上限を設ける\n\t\tsearchWordList = searchWordList.slice(0, this.maxSearchWordListLen)\n\t\tthis.setSearchWordList(searchWordList)\n\t}\n}\n\nComlink.expose(wasm, self)\n"],"sourceRoot":""}